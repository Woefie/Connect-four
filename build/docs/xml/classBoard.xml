<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBoard" kind="class" language="C++" prot="public">
    <compoundname>Board</compoundname>
    <includes refid="board_8h" local="no">board.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBoard_1a287c06bd3e35d42fa95dee18a7db6091" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t Board::last_player</definition>
        <argsstring></argsstring>
        <name>last_player</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="50" column="11" bodyfile="src/board.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBoard_1a2476cc6d7179623f6b895f46fcb5ed05" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::array&lt; uint8_t, <ref refid="board_8h_1a48c424542428a43b85bc94579440e883" kindref="member">BOARD_WIDTH</ref> &gt;, <ref refid="board_8h_1a97561d5deff27e70dfa131a20a9c1046" kindref="member">BOARD_HEIGHT</ref> &gt;</type>
        <definition>std::array&lt;std::array&lt;uint8_t, BOARD_WIDTH&gt;, BOARD_HEIGHT&gt; Board::board</definition>
        <argsstring></argsstring>
        <name>board</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="51" column="14" bodyfile="src/board.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBoard_1ae87b63aa7c19a7ef82f6d70cbb9c7646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::Board</definition>
        <argsstring>()=default</argsstring>
        <name>Board</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="13" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1a692f9810041644a115a59d7b0f774c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::Board</definition>
        <argsstring>(const Board &amp;other)=delete</argsstring>
        <name>Board</name>
        <param>
          <type>const <ref refid="classBoard" kindref="compound">Board</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="16" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1ad8e514ea1b0f6df52379c2c1b91f7a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::Board</definition>
        <argsstring>(Board &amp;&amp;other)=delete</argsstring>
        <name>Board</name>
        <param>
          <type><ref refid="classBoard" kindref="compound">Board</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="17" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1a7288b018e3e2373dde861de91b8e05c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBoard" kindref="compound">Board</ref> &amp;</type>
        <definition>Board&amp; Board::operator=</definition>
        <argsstring>(const Board &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classBoard" kindref="compound">Board</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="18" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1afc55d93ec4e0ff5633955ad18e09243e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBoard" kindref="compound">Board</ref> &amp;</type>
        <definition>Board&amp; Board::operator=</definition>
        <argsstring>(Board &amp;&amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classBoard" kindref="compound">Board</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="19" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1a34de7cbd45d158a05bf3b50e225194ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>auto Board::SetPuck</definition>
        <argsstring>(std::pair&lt; uint8_t, uint8_t &gt; &amp;point, uint8_t player)</argsstring>
        <name>SetPuck</name>
        <param>
          <type>std::pair&lt; uint8_t, uint8_t &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the puck on the board <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">point</parametername>
</parameternamelist>
<parameterdescription>
<para>will be used for placing a puck on the board </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">player</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be put on the board</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if value was succesfull in placing the puck </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="28" column="9" bodyfile="src/board.cpp" bodystart="16" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1a6519353d1f079c98aaa1821055c452e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>auto Board::CheckForWin</definition>
        <argsstring>(const std::pair&lt; uint8_t, uint8_t &gt; point)</argsstring>
        <name>CheckForWin</name>
        <param>
          <type>const std::pair&lt; uint8_t, uint8_t &gt;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if last set puck has a winning position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>containing coordinates of a placed puck </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if last point was winnig </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="35" column="9" bodyfile="src/board.cpp" bodystart="53" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1aca16a877fd022bb782a714dd0f472493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>auto Board::IsFull</definition>
        <argsstring>()</argsstring>
        <name>IsFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the board is full <simplesect kind="return"><para>true if full </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="41" column="9" bodyfile="src/board.cpp" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classBoard_1a94d1eeea786cf380e72ceed16fa4b055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Board::PrintBoard</definition>
        <argsstring>()</argsstring>
        <name>PrintBoard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print out a stylized connect four board on the command line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/board.h" line="46" column="8" bodyfile="src/board.cpp" bodystart="108" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/board.h" line="10" column="1" bodyfile="src/board.h" bodystart="11" bodyend="52"/>
    <listofallmembers>
      <member refid="classBoard_1a2476cc6d7179623f6b895f46fcb5ed05" prot="private" virt="non-virtual"><scope>Board</scope><name>board</name></member>
      <member refid="classBoard_1ae87b63aa7c19a7ef82f6d70cbb9c7646" prot="public" virt="non-virtual"><scope>Board</scope><name>Board</name></member>
      <member refid="classBoard_1a692f9810041644a115a59d7b0f774c88" prot="public" virt="non-virtual"><scope>Board</scope><name>Board</name></member>
      <member refid="classBoard_1ad8e514ea1b0f6df52379c2c1b91f7a75" prot="public" virt="non-virtual"><scope>Board</scope><name>Board</name></member>
      <member refid="classBoard_1a6519353d1f079c98aaa1821055c452e8" prot="public" virt="non-virtual"><scope>Board</scope><name>CheckForWin</name></member>
      <member refid="classBoard_1aca16a877fd022bb782a714dd0f472493" prot="public" virt="non-virtual"><scope>Board</scope><name>IsFull</name></member>
      <member refid="classBoard_1a287c06bd3e35d42fa95dee18a7db6091" prot="private" virt="non-virtual"><scope>Board</scope><name>last_player</name></member>
      <member refid="classBoard_1a7288b018e3e2373dde861de91b8e05c8" prot="public" virt="non-virtual"><scope>Board</scope><name>operator=</name></member>
      <member refid="classBoard_1afc55d93ec4e0ff5633955ad18e09243e" prot="public" virt="non-virtual"><scope>Board</scope><name>operator=</name></member>
      <member refid="classBoard_1a94d1eeea786cf380e72ceed16fa4b055" prot="public" virt="non-virtual"><scope>Board</scope><name>PrintBoard</name></member>
      <member refid="classBoard_1a34de7cbd45d158a05bf3b50e225194ba" prot="public" virt="non-virtual"><scope>Board</scope><name>SetPuck</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
